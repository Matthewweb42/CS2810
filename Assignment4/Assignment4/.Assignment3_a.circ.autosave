<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="5.0.3-HC" version="1.0">
  This file is intended to be loaded by Logisim-evolution (https://github.com/kevinawalsh/logisim-evolution).

  <lib desc="#Base" name="0">
    <tool name="Text Tool">
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="text" val=""/>
      <a name="valign" val="base"/>
    </tool>
  </lib>
  <lib desc="#Wiring" name="1">
    <tool name="Constant">
      <a name="value" val="0x1"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="2"/>
  <lib desc="#Plexers" name="3">
    <tool name="Multiplexer">
      <a name="enable" val="false"/>
    </tool>
    <tool name="Demultiplexer">
      <a name="enable" val="false"/>
    </tool>
  </lib>
  <lib desc="#Arithmetic" name="4"/>
  <lib desc="#Memory" name="5">
    <tool name="ROM">
      <a name="contents">addr/data: 8 8
0
</a>
    </tool>
  </lib>
  <lib desc="jar#Assignment 3.jar#com.github.itoshkov.logisimn2t.Components" name="6"/>
  <main name="Bit"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
    <a name="simsmooth" val="50"/>
  </options>
  <mappings>
    <tool lib="0" map="Button2" name="Menu Tool"/>
    <tool lib="0" map="Button3" name="Menu Tool"/>
    <tool lib="0" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="0" name="Poke Tool"/>
    <tool lib="0" name="Edit Tool"/>
    <tool lib="0" name="Wiring Tool"/>
    <tool lib="0" name="Cutter Tool"/>
    <tool lib="0" name="Text Tool">
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="text" val=""/>
      <a name="valign" val="base"/>
    </tool>
    <sep/>
    <tool lib="1" name="Pin"/>
    <tool lib="1" name="Pin">
      <a name="facing" val="west"/>
      <a name="labelloc" val="east"/>
      <a name="type" val="output"/>
    </tool>
    <tool lib="2" name="NOT Gate"/>
    <tool lib="2" name="AND Gate"/>
    <tool lib="2" name="OR Gate"/>
    <tool lib="2" name="XOR Gate"/>
    <tool lib="2" name="NAND Gate"/>
    <tool lib="2" name="NOR Gate"/>
    <tool lib="0" name="Text"/>
    <tool lib="0" name="Menu Tool"/>
    <tool lib="0" name="Text Tool">
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="text" val=""/>
      <a name="valign" val="base"/>
    </tool>
  </toolbar>
  <circuit name="Bit">
    <comp lib="0" loc="(109,62)" name="Text">
      <a name="font" val="SansSerif bold 12"/>
      <a name="halign" val="left"/>
      <a name="text">Function:
if load(t-1) then out(t) = in(t-1)
else out(t) = out(t-1)

The implementation of this can be found in the book or from lecture slides. 
Take some time to play around with this component (especially the clock) and see how it works.
If you want the clock to automatically tick, go to Simulate&gt;Auto Tick Enabled. You can change
the speed of the clock with Simulate&gt;Auto Tick Frequency

To test this, I recommend turning the Clock to Auto-Tick and verifying that when load is 1, you can
load a value into the flip flop, and when load is 0, the flip flop doesn't change it's value</a>
    </comp>
    <comp lib="0" loc="(265,290)" name="Text"/>
    <comp lib="0" loc="(347,314)" name="Text"/>
    <comp lib="0" loc="(604,296)" name="Text"/>
    <comp lib="1" loc="(190,390)" name="Pin">
      <a name="label" val="in"/>
    </comp>
    <comp lib="1" loc="(260,300)" name="Pin">
      <a name="facing" val="south"/>
      <a name="label" val="load"/>
      <a name="labelloc" val="north"/>
    </comp>
    <comp lib="1" loc="(320,430)" name="Clock"/>
    <comp lib="1" loc="(500,390)" name="Pin">
      <a name="facing" val="west"/>
      <a name="label" val="out"/>
      <a name="labelloc" val="east"/>
      <a name="type" val="output"/>
    </comp>
    <comp lib="5" loc="(340,380)" name="D Flip-Flop">
      <a name="appearance" val="evolution"/>
    </comp>
    <wire from="(320,430)" to="(330,430)"/>
  </circuit>
  <circuit name="Register">
    <comp lib="0" loc="(52,54)" name="Text">
      <a name="font" val="SansSerif bold 12"/>
      <a name="halign" val="left"/>
      <a name="text">Function:
if load(t-1) then out(t) = in(t-1)
else out(t) = out(t-1)

The construction of a w-bit Register chip from 1-bit registers is straightforward. All you have
to do is construct an array of w Bit gates and feed the register's load input to every one of them.

To test this, I recommend turning the Clock to Auto-Tick. When load is 1, you should be able to load a 
16-bit value into the register, when you turn load off, that value should remain in place.</a>
    </comp>
    <comp lib="1" loc="(190,370)" name="Pin">
      <a name="label" val="in"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="1" loc="(290,270)" name="Pin">
      <a name="facing" val="south"/>
      <a name="label" val="load"/>
    </comp>
    <comp lib="1" loc="(440,370)" name="Pin">
      <a name="facing" val="west"/>
      <a name="label" val="out"/>
      <a name="labelloc" val="east"/>
      <a name="type" val="output"/>
      <a name="width" val="16"/>
    </comp>
  </circuit>
  <circuit name="RAM8">
    <comp lib="0" loc="(43,66)" name="Text">
      <a name="font" val="SansSerif bold 12"/>
      <a name="halign" val="left"/>
      <a name="text">Function:
out(t) = RAM[address(t)](t)
If load(t-1) then 
	RAM[address(t - 1)](t) = in(t-1)

To implement a RAM8 chip, you can line up an array of 8 registers. The next step is to build combinational
logic that, given a certain address value, takes the RAM8's in input and only loads it into the selected register.
In a similar fashion, you have to build combinational logic that, given a certain address value, selects the right
register and pipes its out value to the RAM8's out output.

Tip: The combinational logic was already built in Assignment 1</a>
    </comp>
    <comp lib="1" loc="(190,330)" name="Pin">
      <a name="label" val="address"/>
      <a name="width" val="3"/>
    </comp>
    <comp lib="1" loc="(200,420)" name="Pin">
      <a name="label" val="in"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="1" loc="(300,300)" name="Pin">
      <a name="facing" val="south"/>
      <a name="label" val="load"/>
      <a name="labelloc" val="north"/>
    </comp>
    <comp lib="1" loc="(430,350)" name="Pin">
      <a name="facing" val="west"/>
      <a name="label" val="out"/>
      <a name="labelloc" val="east"/>
      <a name="type" val="output"/>
      <a name="width" val="16"/>
    </comp>
  </circuit>
  <circuit name="RAM64">
    <comp lib="0" loc="(46,69)" name="Text">
      <a name="font" val="SansSerif bold 12"/>
      <a name="halign" val="left"/>
      <a name="text">A memory bank of arbitrary length (a power of 2) can be built recursively from smaller memory units, all the way
down to the single register level. A 64-register RAM can be built from an array of eight 8-register RAM
chips. To select a particular register from the RAM64 memory, you can use a 6-bit address, say xxxyyy. 
The MSB xxx bits select one of the RAM8 chips, and the LSB yyy bits select one of the registers within the
selected RAM8. The RAM64 chip should be equipped with logic circuits that enable this hierarchical
addressing scheme.</a>
    </comp>
    <comp lib="1" loc="(170,410)" name="Pin">
      <a name="label" val="address"/>
      <a name="width" val="6"/>
    </comp>
    <comp lib="1" loc="(170,470)" name="Pin">
      <a name="label" val="in"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="1" loc="(290,300)" name="Pin">
      <a name="facing" val="south"/>
      <a name="label" val="load"/>
      <a name="labelloc" val="north"/>
    </comp>
    <comp lib="5" loc="(470,200)" name="RAM">
      <a name="addrWidth" val="3"/>
      <a name="appearance" val="evolution"/>
      <a name="dataWidth" val="16"/>
    </comp>
  </circuit>
  <circuit name="PC">
    <comp lib="0" loc="(116,27)" name="Text">
      <a name="font" val="SansSerif bold 12"/>
      <a name="halign" val="left"/>
      <a name="text">Function:

If reset(t-1) then out(t) = 0
	else if load(t-1) then out(t) = in(t-1)
		else if inc(t-1) then out(t) =(t-1) + 1
			else out(t) = out(t-1)

A w-bit counter consists of two main elements:
a regular w-bit register, and combinational logic. The combinational logic is designed to  
(a) compute the counting function, and 
(b) put the counter in the right operating mode, as dictated by the values
of its three control bits.

Tip: Most of this logic was already built in Assignment 2. Check out the Assignment 3
Components tab on the left.</a>
    </comp>
    <comp lib="1" loc="(190,360)" name="Pin">
      <a name="label" val="in"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="1" loc="(280,300)" name="Pin">
      <a name="facing" val="south"/>
      <a name="label" val="inc"/>
      <a name="labelloc" val="north"/>
    </comp>
    <comp lib="1" loc="(340,300)" name="Pin">
      <a name="facing" val="south"/>
      <a name="label" val="load"/>
      <a name="labelloc" val="north"/>
    </comp>
    <comp lib="1" loc="(400,300)" name="Pin">
      <a name="facing" val="south"/>
      <a name="label" val="reset"/>
      <a name="labelloc" val="north"/>
    </comp>
    <comp lib="1" loc="(530,370)" name="Pin">
      <a name="facing" val="west"/>
      <a name="label" val="out"/>
      <a name="labelloc" val="east"/>
      <a name="type" val="output"/>
      <a name="width" val="16"/>
    </comp>
  </circuit>
</project>
